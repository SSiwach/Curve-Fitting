# -*- coding: utf-8 -*-
"""cs_137_data_fitting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N_LM6qKcLLZ1g4CeV_-MWH5X4xIH6TES
"""

import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('curvefit_cs137_data.csv')

df.head()

x = df.Channel

y = df.Cs137

x,y

plt.scatter(x, y)

"""This is a Gaussian so we fit it with a Gaussian curve """

def gauss_f(x,A,mu,sig):
    return A*np.exp(-(x-mu)**2/sig**2)

x_data = x[(x>725) & (x<850)]
y_data = y[(x>725) & (x<850)]

"""#Plot the subregion"""

plt.scatter(x_data, y_data)
plt.show()

import numpy as np
from scipy.optimize import curve_fit
popt, pcov = curve_fit(gauss_f, x_data, y_data, p0=[2000, 790, 60])

popt #gives the optimal parameters for the model given the data

pcov  #the covariance matrix, which gives an estimate of the "error" of the parameters and the relation the parameters have to eachother



plt.imshow(np.log(np.abs(pcov)))
plt.colorbar()
plt.show()

A_opt, mu_opt, sig_opt = popt
x_model = np.linspace(min(x_data), max(x_data ), 1000)
y_model = gauss_f(x_model, A_opt, mu_opt, sig_opt)

plt.scatter(x_data, y_data)
plt.plot(x_model, y_model, color='r')
plt.show()

popt

np.sqrt(np.diag(pcov))

yerr_data = np.sqrt(y_data)

plt.errorbar(x_data, y_data, yerr_data, ls='', color='k')
plt.scatter(x_data, y_data, s=7, zorder=1000)
plt.plot(x_model, y_model, color='r')
plt.show()

popt

np.sqrt(np.diag(pcov)) #diagionalization of covariance matrix